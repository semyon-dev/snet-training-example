// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProMethods_Stt_FullMethodName = "/service.ProMethods/stt"
)

// ProMethodsClient is the client API for ProMethods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProMethodsClient interface {
	// Этот метод принимает modelID и демон поймет это
	Stt(ctx context.Context, in *SttInput, opts ...grpc.CallOption) (*SttResp, error)
}

type proMethodsClient struct {
	cc grpc.ClientConnInterface
}

func NewProMethodsClient(cc grpc.ClientConnInterface) ProMethodsClient {
	return &proMethodsClient{cc}
}

func (c *proMethodsClient) Stt(ctx context.Context, in *SttInput, opts ...grpc.CallOption) (*SttResp, error) {
	out := new(SttResp)
	err := c.cc.Invoke(ctx, ProMethods_Stt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProMethodsServer is the server API for ProMethods service.
// All implementations must embed UnimplementedProMethodsServer
// for forward compatibility
type ProMethodsServer interface {
	// Этот метод принимает modelID и демон поймет это
	Stt(context.Context, *SttInput) (*SttResp, error)
	mustEmbedUnimplementedProMethodsServer()
}

// UnimplementedProMethodsServer must be embedded to have forward compatible implementations.
type UnimplementedProMethodsServer struct {
}

func (UnimplementedProMethodsServer) Stt(context.Context, *SttInput) (*SttResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stt not implemented")
}
func (UnimplementedProMethodsServer) mustEmbedUnimplementedProMethodsServer() {}

// UnsafeProMethodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProMethodsServer will
// result in compilation errors.
type UnsafeProMethodsServer interface {
	mustEmbedUnimplementedProMethodsServer()
}

func RegisterProMethodsServer(s grpc.ServiceRegistrar, srv ProMethodsServer) {
	s.RegisterService(&ProMethods_ServiceDesc, srv)
}

func _ProMethods_Stt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SttInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProMethodsServer).Stt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProMethods_Stt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProMethodsServer).Stt(ctx, req.(*SttInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ProMethods_ServiceDesc is the grpc.ServiceDesc for ProMethods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProMethods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ProMethods",
	HandlerType: (*ProMethodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stt",
			Handler:    _ProMethods_Stt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	BasicMethods_Tts_FullMethodName = "/service.BasicMethods/tts"
)

// BasicMethodsClient is the client API for BasicMethods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicMethodsClient interface {
	// обычный метод который не принимает modelID
	Tts(ctx context.Context, in *TtsInput, opts ...grpc.CallOption) (*TtsResponse, error)
}

type basicMethodsClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicMethodsClient(cc grpc.ClientConnInterface) BasicMethodsClient {
	return &basicMethodsClient{cc}
}

func (c *basicMethodsClient) Tts(ctx context.Context, in *TtsInput, opts ...grpc.CallOption) (*TtsResponse, error) {
	out := new(TtsResponse)
	err := c.cc.Invoke(ctx, BasicMethods_Tts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicMethodsServer is the server API for BasicMethods service.
// All implementations must embed UnimplementedBasicMethodsServer
// for forward compatibility
type BasicMethodsServer interface {
	// обычный метод который не принимает modelID
	Tts(context.Context, *TtsInput) (*TtsResponse, error)
	mustEmbedUnimplementedBasicMethodsServer()
}

// UnimplementedBasicMethodsServer must be embedded to have forward compatible implementations.
type UnimplementedBasicMethodsServer struct {
}

func (UnimplementedBasicMethodsServer) Tts(context.Context, *TtsInput) (*TtsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tts not implemented")
}
func (UnimplementedBasicMethodsServer) mustEmbedUnimplementedBasicMethodsServer() {}

// UnsafeBasicMethodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicMethodsServer will
// result in compilation errors.
type UnsafeBasicMethodsServer interface {
	mustEmbedUnimplementedBasicMethodsServer()
}

func RegisterBasicMethodsServer(s grpc.ServiceRegistrar, srv BasicMethodsServer) {
	s.RegisterService(&BasicMethods_ServiceDesc, srv)
}

func _BasicMethods_Tts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TtsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicMethodsServer).Tts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicMethods_Tts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicMethodsServer).Tts(ctx, req.(*TtsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicMethods_ServiceDesc is the grpc.ServiceDesc for BasicMethods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicMethods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.BasicMethods",
	HandlerType: (*BasicMethodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "tts",
			Handler:    _BasicMethods_Tts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
