// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: training_v2.proto

package training

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Model_CreateModel_FullMethodName        = "/trainingV2.Model/create_model"
	Model_ValidateModelPrice_FullMethodName = "/trainingV2.Model/validate_model_price"
	Model_UploadAndValidate_FullMethodName  = "/trainingV2.Model/upload_and_validate"
	Model_ValidateModel_FullMethodName      = "/trainingV2.Model/validate_model"
	Model_TrainModelPrice_FullMethodName    = "/trainingV2.Model/train_model_price"
	Model_TrainModel_FullMethodName         = "/trainingV2.Model/train_model"
	Model_DeleteModel_FullMethodName        = "/trainingV2.Model/delete_model"
	Model_GetModelStatus_FullMethodName     = "/trainingV2.Model/get_model_status"
)

// ModelClient is the client API for Model service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelClient interface {
	// Free
	// Can pass the address of the model creator
	CreateModel(ctx context.Context, in *NewModel, opts ...grpc.CallOption) (*ModelID, error)
	// Free
	ValidateModelPrice(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*PriceInBaseUnit, error)
	// Paid
	UploadAndValidate(ctx context.Context, opts ...grpc.CallOption) (Model_UploadAndValidateClient, error)
	// Paid
	ValidateModel(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Free, one signature for both train_model_price & train_model methods
	TrainModelPrice(ctx context.Context, in *ModelID, opts ...grpc.CallOption) (*PriceInBaseUnit, error)
	// Paid
	TrainModel(ctx context.Context, in *ModelID, opts ...grpc.CallOption) (*StatusResponse, error)
	// Free
	DeleteModel(ctx context.Context, in *ModelID, opts ...grpc.CallOption) (*StatusResponse, error)
	// Free
	GetModelStatus(ctx context.Context, in *ModelID, opts ...grpc.CallOption) (*StatusResponse, error)
}

type modelClient struct {
	cc grpc.ClientConnInterface
}

func NewModelClient(cc grpc.ClientConnInterface) ModelClient {
	return &modelClient{cc}
}

func (c *modelClient) CreateModel(ctx context.Context, in *NewModel, opts ...grpc.CallOption) (*ModelID, error) {
	out := new(ModelID)
	err := c.cc.Invoke(ctx, Model_CreateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) ValidateModelPrice(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*PriceInBaseUnit, error) {
	out := new(PriceInBaseUnit)
	err := c.cc.Invoke(ctx, Model_ValidateModelPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) UploadAndValidate(ctx context.Context, opts ...grpc.CallOption) (Model_UploadAndValidateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Model_ServiceDesc.Streams[0], Model_UploadAndValidate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelUploadAndValidateClient{stream}
	return x, nil
}

type Model_UploadAndValidateClient interface {
	Send(*UploadInput) error
	CloseAndRecv() (*StatusResponse, error)
	grpc.ClientStream
}

type modelUploadAndValidateClient struct {
	grpc.ClientStream
}

func (x *modelUploadAndValidateClient) Send(m *UploadInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelUploadAndValidateClient) CloseAndRecv() (*StatusResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelClient) ValidateModel(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Model_ValidateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) TrainModelPrice(ctx context.Context, in *ModelID, opts ...grpc.CallOption) (*PriceInBaseUnit, error) {
	out := new(PriceInBaseUnit)
	err := c.cc.Invoke(ctx, Model_TrainModelPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) TrainModel(ctx context.Context, in *ModelID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Model_TrainModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) DeleteModel(ctx context.Context, in *ModelID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Model_DeleteModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) GetModelStatus(ctx context.Context, in *ModelID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Model_GetModelStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServer is the server API for Model service.
// All implementations must embed UnimplementedModelServer
// for forward compatibility
type ModelServer interface {
	// Free
	// Can pass the address of the model creator
	CreateModel(context.Context, *NewModel) (*ModelID, error)
	// Free
	ValidateModelPrice(context.Context, *ValidateRequest) (*PriceInBaseUnit, error)
	// Paid
	UploadAndValidate(Model_UploadAndValidateServer) error
	// Paid
	ValidateModel(context.Context, *ValidateRequest) (*StatusResponse, error)
	// Free, one signature for both train_model_price & train_model methods
	TrainModelPrice(context.Context, *ModelID) (*PriceInBaseUnit, error)
	// Paid
	TrainModel(context.Context, *ModelID) (*StatusResponse, error)
	// Free
	DeleteModel(context.Context, *ModelID) (*StatusResponse, error)
	// Free
	GetModelStatus(context.Context, *ModelID) (*StatusResponse, error)
	mustEmbedUnimplementedModelServer()
}

// UnimplementedModelServer must be embedded to have forward compatible implementations.
type UnimplementedModelServer struct {
}

func (UnimplementedModelServer) CreateModel(context.Context, *NewModel) (*ModelID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedModelServer) ValidateModelPrice(context.Context, *ValidateRequest) (*PriceInBaseUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateModelPrice not implemented")
}
func (UnimplementedModelServer) UploadAndValidate(Model_UploadAndValidateServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAndValidate not implemented")
}
func (UnimplementedModelServer) ValidateModel(context.Context, *ValidateRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateModel not implemented")
}
func (UnimplementedModelServer) TrainModelPrice(context.Context, *ModelID) (*PriceInBaseUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainModelPrice not implemented")
}
func (UnimplementedModelServer) TrainModel(context.Context, *ModelID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainModel not implemented")
}
func (UnimplementedModelServer) DeleteModel(context.Context, *ModelID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedModelServer) GetModelStatus(context.Context, *ModelID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelStatus not implemented")
}
func (UnimplementedModelServer) mustEmbedUnimplementedModelServer() {}

// UnsafeModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServer will
// result in compilation errors.
type UnsafeModelServer interface {
	mustEmbedUnimplementedModelServer()
}

func RegisterModelServer(s grpc.ServiceRegistrar, srv ModelServer) {
	s.RegisterService(&Model_ServiceDesc, srv)
}

func _Model_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).CreateModel(ctx, req.(*NewModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_ValidateModelPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).ValidateModelPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_ValidateModelPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).ValidateModelPrice(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_UploadAndValidate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServer).UploadAndValidate(&modelUploadAndValidateServer{stream})
}

type Model_UploadAndValidateServer interface {
	SendAndClose(*StatusResponse) error
	Recv() (*UploadInput, error)
	grpc.ServerStream
}

type modelUploadAndValidateServer struct {
	grpc.ServerStream
}

func (x *modelUploadAndValidateServer) SendAndClose(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelUploadAndValidateServer) Recv() (*UploadInput, error) {
	m := new(UploadInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Model_ValidateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).ValidateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_ValidateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).ValidateModel(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_TrainModelPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).TrainModelPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_TrainModelPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).TrainModelPrice(ctx, req.(*ModelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_TrainModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).TrainModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_TrainModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).TrainModel(ctx, req.(*ModelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_DeleteModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).DeleteModel(ctx, req.(*ModelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_GetModelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).GetModelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_GetModelStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).GetModelStatus(ctx, req.(*ModelID))
	}
	return interceptor(ctx, in, info, handler)
}

// Model_ServiceDesc is the grpc.ServiceDesc for Model service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Model_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainingV2.Model",
	HandlerType: (*ModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_model",
			Handler:    _Model_CreateModel_Handler,
		},
		{
			MethodName: "validate_model_price",
			Handler:    _Model_ValidateModelPrice_Handler,
		},
		{
			MethodName: "validate_model",
			Handler:    _Model_ValidateModel_Handler,
		},
		{
			MethodName: "train_model_price",
			Handler:    _Model_TrainModelPrice_Handler,
		},
		{
			MethodName: "train_model",
			Handler:    _Model_TrainModel_Handler,
		},
		{
			MethodName: "delete_model",
			Handler:    _Model_DeleteModel_Handler,
		},
		{
			MethodName: "get_model_status",
			Handler:    _Model_GetModelStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "upload_and_validate",
			Handler:       _Model_UploadAndValidate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "training_v2.proto",
}
