// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: training_daemon.proto

package training

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Daemon_CreateModel_FullMethodName         = "/training.Daemon/create_model"
	Daemon_ValidateModelPrice_FullMethodName  = "/training.Daemon/validate_model_price"
	Daemon_UploadAndValidate_FullMethodName   = "/training.Daemon/upload_and_validate"
	Daemon_ValidateModel_FullMethodName       = "/training.Daemon/validate_model"
	Daemon_TrainModelPrice_FullMethodName     = "/training.Daemon/train_model_price"
	Daemon_TrainModel_FullMethodName          = "/training.Daemon/train_model"
	Daemon_DeleteModel_FullMethodName         = "/training.Daemon/delete_model"
	Daemon_GetAllModels_FullMethodName        = "/training.Daemon/get_all_models"
	Daemon_GetModel_FullMethodName            = "/training.Daemon/get_model"
	Daemon_UpdateModel_FullMethodName         = "/training.Daemon/update_model"
	Daemon_GetTrainingMetadata_FullMethodName = "/training.Daemon/get_training_metadata"
	Daemon_GetMethodMetadata_FullMethodName   = "/training.Daemon/get_method_metadata"
)

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	// Free
	CreateModel(ctx context.Context, in *NewModelRequest, opts ...grpc.CallOption) (*ModelResponse, error)
	// Free
	ValidateModelPrice(ctx context.Context, in *AuthValidateRequest, opts ...grpc.CallOption) (*PriceInBaseUnit, error)
	// Paid
	UploadAndValidate(ctx context.Context, opts ...grpc.CallOption) (Daemon_UploadAndValidateClient, error)
	// Paid
	ValidateModel(ctx context.Context, in *AuthValidateRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Free, one signature for both train_model_price & train_model methods
	TrainModelPrice(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*PriceInBaseUnit, error)
	// Paid
	TrainModel(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Free
	// After deleting the model, the status becomes DELETED in etcd
	DeleteModel(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetAllModels(ctx context.Context, in *AllModelsRequest, opts ...grpc.CallOption) (*ModelsResponse, error)
	GetModel(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ModelResponse, error)
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*ModelResponse, error)
	// Unique methods by daemon
	// One signature for all getters
	GetTrainingMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TrainingMetadata, error)
	// Free & without authorization
	GetMethodMetadata(ctx context.Context, in *MethodMetadataRequest, opts ...grpc.CallOption) (*MethodMetadata, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) CreateModel(ctx context.Context, in *NewModelRequest, opts ...grpc.CallOption) (*ModelResponse, error) {
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, Daemon_CreateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) ValidateModelPrice(ctx context.Context, in *AuthValidateRequest, opts ...grpc.CallOption) (*PriceInBaseUnit, error) {
	out := new(PriceInBaseUnit)
	err := c.cc.Invoke(ctx, Daemon_ValidateModelPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) UploadAndValidate(ctx context.Context, opts ...grpc.CallOption) (Daemon_UploadAndValidateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[0], Daemon_UploadAndValidate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &daemonUploadAndValidateClient{stream}
	return x, nil
}

type Daemon_UploadAndValidateClient interface {
	Send(*UploadAndValidateRequest) error
	CloseAndRecv() (*StatusResponse, error)
	grpc.ClientStream
}

type daemonUploadAndValidateClient struct {
	grpc.ClientStream
}

func (x *daemonUploadAndValidateClient) Send(m *UploadAndValidateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *daemonUploadAndValidateClient) CloseAndRecv() (*StatusResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *daemonClient) ValidateModel(ctx context.Context, in *AuthValidateRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Daemon_ValidateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) TrainModelPrice(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*PriceInBaseUnit, error) {
	out := new(PriceInBaseUnit)
	err := c.cc.Invoke(ctx, Daemon_TrainModelPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) TrainModel(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Daemon_TrainModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) DeleteModel(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Daemon_DeleteModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) GetAllModels(ctx context.Context, in *AllModelsRequest, opts ...grpc.CallOption) (*ModelsResponse, error) {
	out := new(ModelsResponse)
	err := c.cc.Invoke(ctx, Daemon_GetAllModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) GetModel(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ModelResponse, error) {
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, Daemon_GetModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*ModelResponse, error) {
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, Daemon_UpdateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) GetTrainingMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TrainingMetadata, error) {
	out := new(TrainingMetadata)
	err := c.cc.Invoke(ctx, Daemon_GetTrainingMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) GetMethodMetadata(ctx context.Context, in *MethodMetadataRequest, opts ...grpc.CallOption) (*MethodMetadata, error) {
	out := new(MethodMetadata)
	err := c.cc.Invoke(ctx, Daemon_GetMethodMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServer is the server API for Daemon service.
// All implementations must embed UnimplementedDaemonServer
// for forward compatibility
type DaemonServer interface {
	// Free
	CreateModel(context.Context, *NewModelRequest) (*ModelResponse, error)
	// Free
	ValidateModelPrice(context.Context, *AuthValidateRequest) (*PriceInBaseUnit, error)
	// Paid
	UploadAndValidate(Daemon_UploadAndValidateServer) error
	// Paid
	ValidateModel(context.Context, *AuthValidateRequest) (*StatusResponse, error)
	// Free, one signature for both train_model_price & train_model methods
	TrainModelPrice(context.Context, *CommonRequest) (*PriceInBaseUnit, error)
	// Paid
	TrainModel(context.Context, *CommonRequest) (*StatusResponse, error)
	// Free
	// After deleting the model, the status becomes DELETED in etcd
	DeleteModel(context.Context, *CommonRequest) (*StatusResponse, error)
	GetAllModels(context.Context, *AllModelsRequest) (*ModelsResponse, error)
	GetModel(context.Context, *CommonRequest) (*ModelResponse, error)
	UpdateModel(context.Context, *UpdateModelRequest) (*ModelResponse, error)
	// Unique methods by daemon
	// One signature for all getters
	GetTrainingMetadata(context.Context, *emptypb.Empty) (*TrainingMetadata, error)
	// Free & without authorization
	GetMethodMetadata(context.Context, *MethodMetadataRequest) (*MethodMetadata, error)
	mustEmbedUnimplementedDaemonServer()
}

// UnimplementedDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonServer struct {
}

func (UnimplementedDaemonServer) CreateModel(context.Context, *NewModelRequest) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedDaemonServer) ValidateModelPrice(context.Context, *AuthValidateRequest) (*PriceInBaseUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateModelPrice not implemented")
}
func (UnimplementedDaemonServer) UploadAndValidate(Daemon_UploadAndValidateServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAndValidate not implemented")
}
func (UnimplementedDaemonServer) ValidateModel(context.Context, *AuthValidateRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateModel not implemented")
}
func (UnimplementedDaemonServer) TrainModelPrice(context.Context, *CommonRequest) (*PriceInBaseUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainModelPrice not implemented")
}
func (UnimplementedDaemonServer) TrainModel(context.Context, *CommonRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainModel not implemented")
}
func (UnimplementedDaemonServer) DeleteModel(context.Context, *CommonRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedDaemonServer) GetAllModels(context.Context, *AllModelsRequest) (*ModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllModels not implemented")
}
func (UnimplementedDaemonServer) GetModel(context.Context, *CommonRequest) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedDaemonServer) UpdateModel(context.Context, *UpdateModelRequest) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedDaemonServer) GetTrainingMetadata(context.Context, *emptypb.Empty) (*TrainingMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingMetadata not implemented")
}
func (UnimplementedDaemonServer) GetMethodMetadata(context.Context, *MethodMetadataRequest) (*MethodMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMethodMetadata not implemented")
}
func (UnimplementedDaemonServer) mustEmbedUnimplementedDaemonServer() {}

// UnsafeDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServer will
// result in compilation errors.
type UnsafeDaemonServer interface {
	mustEmbedUnimplementedDaemonServer()
}

func RegisterDaemonServer(s grpc.ServiceRegistrar, srv DaemonServer) {
	s.RegisterService(&Daemon_ServiceDesc, srv)
}

func _Daemon_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).CreateModel(ctx, req.(*NewModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_ValidateModelPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).ValidateModelPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_ValidateModelPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).ValidateModelPrice(ctx, req.(*AuthValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_UploadAndValidate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DaemonServer).UploadAndValidate(&daemonUploadAndValidateServer{stream})
}

type Daemon_UploadAndValidateServer interface {
	SendAndClose(*StatusResponse) error
	Recv() (*UploadAndValidateRequest, error)
	grpc.ServerStream
}

type daemonUploadAndValidateServer struct {
	grpc.ServerStream
}

func (x *daemonUploadAndValidateServer) SendAndClose(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *daemonUploadAndValidateServer) Recv() (*UploadAndValidateRequest, error) {
	m := new(UploadAndValidateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Daemon_ValidateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).ValidateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_ValidateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).ValidateModel(ctx, req.(*AuthValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_TrainModelPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).TrainModelPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_TrainModelPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).TrainModelPrice(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_TrainModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).TrainModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_TrainModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).TrainModel(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_DeleteModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).DeleteModel(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_GetAllModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetAllModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_GetAllModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetAllModels(ctx, req.(*AllModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetModel(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_UpdateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_GetTrainingMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetTrainingMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_GetTrainingMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetTrainingMetadata(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_GetMethodMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetMethodMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_GetMethodMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetMethodMetadata(ctx, req.(*MethodMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Daemon_ServiceDesc is the grpc.ServiceDesc for Daemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Daemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_model",
			Handler:    _Daemon_CreateModel_Handler,
		},
		{
			MethodName: "validate_model_price",
			Handler:    _Daemon_ValidateModelPrice_Handler,
		},
		{
			MethodName: "validate_model",
			Handler:    _Daemon_ValidateModel_Handler,
		},
		{
			MethodName: "train_model_price",
			Handler:    _Daemon_TrainModelPrice_Handler,
		},
		{
			MethodName: "train_model",
			Handler:    _Daemon_TrainModel_Handler,
		},
		{
			MethodName: "delete_model",
			Handler:    _Daemon_DeleteModel_Handler,
		},
		{
			MethodName: "get_all_models",
			Handler:    _Daemon_GetAllModels_Handler,
		},
		{
			MethodName: "get_model",
			Handler:    _Daemon_GetModel_Handler,
		},
		{
			MethodName: "update_model",
			Handler:    _Daemon_UpdateModel_Handler,
		},
		{
			MethodName: "get_training_metadata",
			Handler:    _Daemon_GetTrainingMetadata_Handler,
		},
		{
			MethodName: "get_method_metadata",
			Handler:    _Daemon_GetMethodMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "upload_and_validate",
			Handler:       _Daemon_UploadAndValidate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "training_daemon.proto",
}
