// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: training_v2.proto

package training

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_CREATED      Status = 0
	Status_VALIDATING   Status = 1
	Status_VALIDATED    Status = 2
	Status_TRAINING     Status = 3
	Status_READY_TO_USE Status = 4 // After training is completed
	Status_ERRORED      Status = 5
	Status_DELETED      Status = 6
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "CREATED",
		1: "VALIDATING",
		2: "VALIDATED",
		3: "TRAINING",
		4: "READY_TO_USE",
		5: "ERRORED",
		6: "DELETED",
	}
	Status_value = map[string]int32{
		"CREATED":      0,
		"VALIDATING":   1,
		"VALIDATED":    2,
		"TRAINING":     3,
		"READY_TO_USE": 4,
		"ERRORED":      5,
		"DELETED":      6,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_training_v2_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_training_v2_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_training_v2_proto_rawDescGZIP(), []int{0}
}

type ModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId         string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Status          Status `protobuf:"varint,2,opt,name=status,proto3,enum=trainingV2.Status" json:"status,omitempty"`
	UpdatedDate     string `protobuf:"bytes,3,opt,name=updated_date,json=updatedDate,proto3" json:"updated_date,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	GrpcMethodName  string `protobuf:"bytes,6,opt,name=grpc_method_name,json=grpcMethodName,proto3" json:"grpc_method_name,omitempty"`
	GrpcServiceName string `protobuf:"bytes,7,opt,name=grpc_service_name,json=grpcServiceName,proto3" json:"grpc_service_name,omitempty"`
	// List of all addresses that will have access to this model
	AddressList []string `protobuf:"bytes,8,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
	// Access to the model is granted only for use and viewing
	IsPublic         bool   `protobuf:"varint,9,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	TrainingDataLink string `protobuf:"bytes,10,opt,name=training_data_link,json=trainingDataLink,proto3" json:"training_data_link,omitempty"`
}

func (x *ModelResponse) Reset() {
	*x = ModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelResponse) ProtoMessage() {}

func (x *ModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelResponse.ProtoReflect.Descriptor instead.
func (*ModelResponse) Descriptor() ([]byte, []int) {
	return file_training_v2_proto_rawDescGZIP(), []int{0}
}

func (x *ModelResponse) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ModelResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CREATED
}

func (x *ModelResponse) GetUpdatedDate() string {
	if x != nil {
		return x.UpdatedDate
	}
	return ""
}

func (x *ModelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModelResponse) GetGrpcMethodName() string {
	if x != nil {
		return x.GrpcMethodName
	}
	return ""
}

func (x *ModelResponse) GetGrpcServiceName() string {
	if x != nil {
		return x.GrpcServiceName
	}
	return ""
}

func (x *ModelResponse) GetAddressList() []string {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *ModelResponse) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ModelResponse) GetTrainingDataLink() string {
	if x != nil {
		return x.TrainingDataLink
	}
	return ""
}

// Used as input for new_model requests
// The service provider decides whether to use these fields; returning model_id is mandatory
type NewModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	GrpcMethodName  string `protobuf:"bytes,3,opt,name=grpc_method_name,json=grpcMethodName,proto3" json:"grpc_method_name,omitempty"`
	GrpcServiceName string `protobuf:"bytes,4,opt,name=grpc_service_name,json=grpcServiceName,proto3" json:"grpc_service_name,omitempty"`
	// List of all addresses that will have access to this model
	AddressList []string `protobuf:"bytes,5,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
	// Set this to true if you want your model to be accessible by other AI consumers
	IsPublic bool `protobuf:"varint,6,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// These parameters will be passed by the daemon
	OrganizationId string `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ServiceId      string `protobuf:"bytes,8,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	GroupId        string `protobuf:"bytes,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *NewModel) Reset() {
	*x = NewModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewModel) ProtoMessage() {}

func (x *NewModel) ProtoReflect() protoreflect.Message {
	mi := &file_training_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewModel.ProtoReflect.Descriptor instead.
func (*NewModel) Descriptor() ([]byte, []int) {
	return file_training_v2_proto_rawDescGZIP(), []int{1}
}

func (x *NewModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewModel) GetGrpcMethodName() string {
	if x != nil {
		return x.GrpcMethodName
	}
	return ""
}

func (x *NewModel) GetGrpcServiceName() string {
	if x != nil {
		return x.GrpcServiceName
	}
	return ""
}

func (x *NewModel) GetAddressList() []string {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *NewModel) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *NewModel) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *NewModel) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *NewModel) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// This structure must be used by the service provider
type ModelID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (x *ModelID) Reset() {
	*x = ModelID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelID) ProtoMessage() {}

func (x *ModelID) ProtoReflect() protoreflect.Message {
	mi := &file_training_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelID.ProtoReflect.Descriptor instead.
func (*ModelID) Descriptor() ([]byte, []int) {
	return file_training_v2_proto_rawDescGZIP(), []int{2}
}

func (x *ModelID) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

// This structure must be used by the service provider
// Used in the train_model_price method to get the training/validation price
type PriceInBaseUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"` // cogs, weis, afet, aasi, etc.
}

func (x *PriceInBaseUnit) Reset() {
	*x = PriceInBaseUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceInBaseUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceInBaseUnit) ProtoMessage() {}

func (x *PriceInBaseUnit) ProtoReflect() protoreflect.Message {
	mi := &file_training_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceInBaseUnit.ProtoReflect.Descriptor instead.
func (*PriceInBaseUnit) Descriptor() ([]byte, []int) {
	return file_training_v2_proto_rawDescGZIP(), []int{3}
}

func (x *PriceInBaseUnit) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=trainingV2.Status" json:"status,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_training_v2_proto_rawDescGZIP(), []int{4}
}

func (x *StatusResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CREATED
}

type UploadInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId     string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	FileName    string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize    uint64 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"` // in bytes
	BatchSize   uint64 `protobuf:"varint,5,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	BatchNumber uint64 `protobuf:"varint,6,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	BatchCount  uint64 `protobuf:"varint,7,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
}

func (x *UploadInput) Reset() {
	*x = UploadInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadInput) ProtoMessage() {}

func (x *UploadInput) ProtoReflect() protoreflect.Message {
	mi := &file_training_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadInput.ProtoReflect.Descriptor instead.
func (*UploadInput) Descriptor() ([]byte, []int) {
	return file_training_v2_proto_rawDescGZIP(), []int{5}
}

func (x *UploadInput) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *UploadInput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadInput) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadInput) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *UploadInput) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *UploadInput) GetBatchNumber() uint64 {
	if x != nil {
		return x.BatchNumber
	}
	return 0
}

func (x *UploadInput) GetBatchCount() uint64 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

type ValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId          string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	TrainingDataLink string `protobuf:"bytes,3,opt,name=training_data_link,json=trainingDataLink,proto3" json:"training_data_link,omitempty"`
}

func (x *ValidateRequest) Reset() {
	*x = ValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRequest) ProtoMessage() {}

func (x *ValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_training_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRequest.ProtoReflect.Descriptor instead.
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return file_training_v2_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ValidateRequest) GetTrainingDataLink() string {
	if x != nil {
		return x.TrainingDataLink
	}
	return ""
}

var file_training_v2_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50001,
		Name:          "trainingV2.default_model_id",
		Tag:           "bytes,50001,opt,name=default_model_id",
		Filename:      "training_v2.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         50002,
		Name:          "trainingV2.max_models_per_user",
		Tag:           "varint,50002,opt,name=max_models_per_user",
		Filename:      "training_v2.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         50003,
		Name:          "trainingV2.dataset_max_size_mb",
		Tag:           "varint,50003,opt,name=dataset_max_size_mb",
		Filename:      "training_v2.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         50004,
		Name:          "trainingV2.dataset_max_count_files",
		Tag:           "varint,50004,opt,name=dataset_max_count_files",
		Filename:      "training_v2.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         50005,
		Name:          "trainingV2.dataset_max_size_single_file_mb",
		Tag:           "varint,50005,opt,name=dataset_max_size_single_file_mb",
		Filename:      "training_v2.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50006,
		Name:          "trainingV2.dataset_files_type",
		Tag:           "bytes,50006,opt,name=dataset_files_type",
		Filename:      "training_v2.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50007,
		Name:          "trainingV2.dataset_type",
		Tag:           "bytes,50007,opt,name=dataset_type",
		Filename:      "training_v2.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50008,
		Name:          "trainingV2.dataset_description",
		Tag:           "bytes,50008,opt,name=dataset_description",
		Filename:      "training_v2.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional string default_model_id = 50001;
	E_DefaultModelId = &file_training_v2_proto_extTypes[0]
	// optional uint64 max_models_per_user = 50002;
	E_MaxModelsPerUser = &file_training_v2_proto_extTypes[1] // max models per method & user
	// optional uint64 dataset_max_size_mb = 50003;
	E_DatasetMaxSizeMb = &file_training_v2_proto_extTypes[2] // max size of dataset
	// optional uint64 dataset_max_count_files = 50004;
	E_DatasetMaxCountFiles = &file_training_v2_proto_extTypes[3] // maximum number of files in the dataset
	// optional uint64 dataset_max_size_single_file_mb = 50005;
	E_DatasetMaxSizeSingleFileMb = &file_training_v2_proto_extTypes[4] // maximum size of a single file in the dataset
	// optional string dataset_files_type = 50006;
	E_DatasetFilesType = &file_training_v2_proto_extTypes[5] // allowed files types in dataset. string with array or single value, example: jpg, png, mp3
	// optional string dataset_type = 50007;
	E_DatasetType = &file_training_v2_proto_extTypes[6] // string with array or single value, example: zip, tar.gz, tar
	// optional string dataset_description = 50008;
	E_DatasetDescription = &file_training_v2_proto_extTypes[7] // additional free-form requirements
)

var File_training_v2_proto protoreflect.FileDescriptor

var file_training_v2_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf3, 0x02, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x72, 0x70, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xb9, 0x02, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x70, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x0f, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56,
	0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xd9, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x0f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x2a, 0x6e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x32, 0xca, 0x04, 0x0a, 0x05, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e,
	0x4e, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x56, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56,
	0x32, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x56, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x56, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x1a, 0x1a, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44,
	0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x3a, 0x4a, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x3a, 0x4f, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x86, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x3a, 0x4f, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x62, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd3, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x4d, 0x62, 0x3a, 0x57, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd4,
	0x86, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x65, 0x0a, 0x1f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x62, 0x12,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xd5, 0x86, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x62, 0x3a, 0x4e, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd6, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x43, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd7, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x51, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xd8, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x5a, 0x0b, 0x2e,
	0x2e, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_training_v2_proto_rawDescOnce sync.Once
	file_training_v2_proto_rawDescData = file_training_v2_proto_rawDesc
)

func file_training_v2_proto_rawDescGZIP() []byte {
	file_training_v2_proto_rawDescOnce.Do(func() {
		file_training_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_training_v2_proto_rawDescData)
	})
	return file_training_v2_proto_rawDescData
}

var file_training_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_training_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_training_v2_proto_goTypes = []any{
	(Status)(0),                        // 0: trainingV2.Status
	(*ModelResponse)(nil),              // 1: trainingV2.ModelResponse
	(*NewModel)(nil),                   // 2: trainingV2.NewModel
	(*ModelID)(nil),                    // 3: trainingV2.ModelID
	(*PriceInBaseUnit)(nil),            // 4: trainingV2.PriceInBaseUnit
	(*StatusResponse)(nil),             // 5: trainingV2.StatusResponse
	(*UploadInput)(nil),                // 6: trainingV2.UploadInput
	(*ValidateRequest)(nil),            // 7: trainingV2.ValidateRequest
	(*descriptorpb.MethodOptions)(nil), // 8: google.protobuf.MethodOptions
}
var file_training_v2_proto_depIdxs = []int32{
	0,  // 0: trainingV2.ModelResponse.status:type_name -> trainingV2.Status
	0,  // 1: trainingV2.StatusResponse.status:type_name -> trainingV2.Status
	8,  // 2: trainingV2.default_model_id:extendee -> google.protobuf.MethodOptions
	8,  // 3: trainingV2.max_models_per_user:extendee -> google.protobuf.MethodOptions
	8,  // 4: trainingV2.dataset_max_size_mb:extendee -> google.protobuf.MethodOptions
	8,  // 5: trainingV2.dataset_max_count_files:extendee -> google.protobuf.MethodOptions
	8,  // 6: trainingV2.dataset_max_size_single_file_mb:extendee -> google.protobuf.MethodOptions
	8,  // 7: trainingV2.dataset_files_type:extendee -> google.protobuf.MethodOptions
	8,  // 8: trainingV2.dataset_type:extendee -> google.protobuf.MethodOptions
	8,  // 9: trainingV2.dataset_description:extendee -> google.protobuf.MethodOptions
	2,  // 10: trainingV2.Model.create_model:input_type -> trainingV2.NewModel
	7,  // 11: trainingV2.Model.validate_model_price:input_type -> trainingV2.ValidateRequest
	6,  // 12: trainingV2.Model.upload_and_validate:input_type -> trainingV2.UploadInput
	7,  // 13: trainingV2.Model.validate_model:input_type -> trainingV2.ValidateRequest
	3,  // 14: trainingV2.Model.train_model_price:input_type -> trainingV2.ModelID
	3,  // 15: trainingV2.Model.train_model:input_type -> trainingV2.ModelID
	3,  // 16: trainingV2.Model.delete_model:input_type -> trainingV2.ModelID
	3,  // 17: trainingV2.Model.get_model_status:input_type -> trainingV2.ModelID
	3,  // 18: trainingV2.Model.create_model:output_type -> trainingV2.ModelID
	4,  // 19: trainingV2.Model.validate_model_price:output_type -> trainingV2.PriceInBaseUnit
	5,  // 20: trainingV2.Model.upload_and_validate:output_type -> trainingV2.StatusResponse
	5,  // 21: trainingV2.Model.validate_model:output_type -> trainingV2.StatusResponse
	4,  // 22: trainingV2.Model.train_model_price:output_type -> trainingV2.PriceInBaseUnit
	5,  // 23: trainingV2.Model.train_model:output_type -> trainingV2.StatusResponse
	5,  // 24: trainingV2.Model.delete_model:output_type -> trainingV2.StatusResponse
	5,  // 25: trainingV2.Model.get_model_status:output_type -> trainingV2.StatusResponse
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	2,  // [2:10] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_training_v2_proto_init() }
func file_training_v2_proto_init() {
	if File_training_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_training_v2_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_v2_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NewModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_v2_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ModelID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_v2_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PriceInBaseUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_v2_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_v2_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UploadInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_v2_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_training_v2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 8,
			NumServices:   1,
		},
		GoTypes:           file_training_v2_proto_goTypes,
		DependencyIndexes: file_training_v2_proto_depIdxs,
		EnumInfos:         file_training_v2_proto_enumTypes,
		MessageInfos:      file_training_v2_proto_msgTypes,
		ExtensionInfos:    file_training_v2_proto_extTypes,
	}.Build()
	File_training_v2_proto = out.File
	file_training_v2_proto_rawDesc = nil
	file_training_v2_proto_goTypes = nil
	file_training_v2_proto_depIdxs = nil
}
